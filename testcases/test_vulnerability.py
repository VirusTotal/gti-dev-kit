import pytest
from unittest.mock import patch, MagicMock
import requests
from examples.vulnerability_intelligence.vulnerability import (
    make_api_request,
    get_vulnerability,
    print_vulnerability,
    main,
    BASE_URL,
)
from testcases.constants import VULNERABILITY_API_RESPONSE


@pytest.fixture
def mock_requests_get():
    with patch("requests.get") as mock_get:
        yield mock_get


def test_make_api_request_success(mock_requests_get):
    """Test successful API request."""
    mock_response = MagicMock(status_code=200)
    mock_response.json.return_value = VULNERABILITY_API_RESPONSE
    mock_requests_get.return_value = mock_response

    params = {"filter": "collection_type:vulnerability"}
    url = f"{BASE_URL}/collections"
    result = make_api_request(url, params=params)

    assert result["success"] is True
    assert result["data"] == VULNERABILITY_API_RESPONSE
    assert result["error"] is None
    assert result["status_code"] == 200
    assert result["should_retry"] is False
    mock_requests_get.assert_called_once_with(
        url,
        headers={"x-apikey": "YOUR_API_KEY", "x-tool": "YOUR_PRODUCT_NAME"},
        params=params,
        timeout=60,
    )


def test_make_api_request_400_bad_request(mock_requests_get):
    """Test API request with 400 Bad Request."""
    mock_response = MagicMock(status_code=400)
    mock_requests_get.return_value = mock_response

    params = {"filter": "invalid"}
    url = f"{BASE_URL}/collections"
    result = make_api_request(url, params=params)

    assert result["success"] is False
    assert result["error"] == "Bad request - invalid parameters"
    assert result["status_code"] == 400
    assert result["should_retry"] is False


def test_make_api_request_401_unauthorized(mock_requests_get):
    """Test API request with 401 Unauthorized."""
    mock_response = MagicMock(status_code=401)
    mock_requests_get.return_value = mock_response

    params = {"filter": "collection_type:vulnerability"}
    url = f"{BASE_URL}/collections"
    result = make_api_request(url, params=params)

    assert result["success"] is False
    assert result["error"] == "Unauthorized - invalid API key"
    assert result["status_code"] == 401
    assert result["should_retry"] is False


def test_make_api_request_403_forbidden(mock_requests_get):
    """Test API request with 403 Forbidden."""
    mock_response = MagicMock(status_code=403)
    mock_requests_get.return_value = mock_response

    params = {"filter": "collection_type:vulnerability"}
    url = f"{BASE_URL}/collections"
    result = make_api_request(url, params=params)

    assert result["success"] is False
    assert result["error"] == "Forbidden - insufficient permissions"
    assert result["status_code"] == 403
    assert result["should_retry"] is False


def test_make_api_request_404_not_found(mock_requests_get):
    """Test API request with 404 Not Found."""
    mock_response = MagicMock(status_code=404)
    mock_requests_get.return_value = mock_response

    params = {"filter": "collection_type:vulnerability"}
    url = f"{BASE_URL}/collections"
    result = make_api_request(url, params=params)

    assert result["success"] is False
    assert result["error"] == "Endpoint not found"
    assert result["status_code"] == 404
    assert result["should_retry"] is False


def test_make_api_request_429_rate_limit(mock_requests_get):
    """Test API request with 429 Rate Limit Exceeded."""
    mock_response = MagicMock(status_code=429)
    mock_requests_get.return_value = mock_response

    params = {"filter": "collection_type:vulnerability"}
    url = f"{BASE_URL}/collections"
    result = make_api_request(url, params=params)

    assert result["success"] is False
    assert result["error"] == "Rate limit exceeded"
    assert result["status_code"] == 429
    assert result["should_retry"] is True


def test_make_api_request_500_server_error(mock_requests_get):
    """Test API request with 500 Server Error."""
    mock_response = MagicMock(status_code=500)
    mock_requests_get.return_value = mock_response

    params = {"filter": "collection_type:vulnerability"}
    url = f"{BASE_URL}/collections"
    result = make_api_request(url, params=params)

    assert result["success"] is False
    assert result["error"] == "Server error (HTTP 500)"
    assert result["status_code"] == 500
    assert result["should_retry"] is True


def test_make_api_request_timeout(mock_requests_get):
    """Test API request with timeout."""
    mock_requests_get.side_effect = requests.exceptions.Timeout

    params = {"filter": "collection_type:vulnerability"}
    url = f"{BASE_URL}/collections"
    result = make_api_request(url, params=params)

    assert result["success"] is False
    assert result["error"] == "Request timed out"
    assert result["should_retry"] is True


def test_make_api_request_connection_error(mock_requests_get):
    """Test API request with connection error."""
    mock_requests_get.side_effect = requests.exceptions.ConnectionError

    params = {"filter": "collection_type:vulnerability"}
    url = f"{BASE_URL}/collections"
    result = make_api_request(url, params=params)

    assert result["success"] is False
    assert result["error"] == "Connection error - check your network"
    assert result["should_retry"] is True


def test_make_api_request_json_decode_error(mock_requests_get):
    """Test API request with JSON decode error."""
    mock_response = MagicMock(status_code=200)
    mock_response.json.side_effect = ValueError("Invalid JSON")
    mock_requests_get.return_value = mock_response

    params = {"filter": "collection_type:vulnerability"}
    url = f"{BASE_URL}/collections"
    result = make_api_request(url, params=params)

    assert result["success"] is False
    assert result["error"] == "Failed to parse JSON response: Invalid JSON"
    assert result["should_retry"] is False


def test_make_api_request_unexpected_error(mock_requests_get):
    """Test API request with unexpected error."""
    mock_requests_get.side_effect = requests.exceptions.RequestException(
        "Unexpected error"
    )

    params = {"filter": "collection_type:vulnerability"}
    url = f"{BASE_URL}/collections"
    result = make_api_request(url, params=params)

    assert result["success"] is False
    assert result["error"] == "Request failed: Unexpected error"
    assert result["should_retry"] is False


def test_get_vulnerability_success(mock_requests_get):
    """Test successful vulnerability fetch."""
    mock_response = MagicMock(status_code=200)
    mock_response.json.return_value = VULNERABILITY_API_RESPONSE
    mock_requests_get.return_value = mock_response

    result = get_vulnerability()

    assert result["success"] is True
    assert result["data"] == VULNERABILITY_API_RESPONSE
    assert result["error"] is None
    assert result["status_code"] == 200
    assert result["should_retry"] is False
    mock_requests_get.assert_called_once_with(
        f"{BASE_URL}/collections",
        headers={"x-apikey": "YOUR_API_KEY", "x-tool": "YOUR_PRODUCT_NAME"},
        params={"filter": "collection_type:vulnerability"},
        timeout=60,
    )


def test_get_vulnerability_rate_limit(mock_requests_get):
    """Test vulnerability fetch with rate limit error."""
    mock_response = MagicMock(status_code=429)
    mock_requests_get.return_value = mock_response

    result = get_vulnerability()

    assert result["success"] is False
    assert result["error"] == "Rate limit exceeded"
    assert result["status_code"] == 429
    assert result["should_retry"] is True


def test_get_vulnerability_not_found(mock_requests_get):
    """Test vulnerability fetch with 404 error."""
    mock_response = MagicMock(status_code=404)
    mock_requests_get.return_value = mock_response

    result = get_vulnerability()

    assert result["success"] is False
    assert result["error"] == "Endpoint not found"
    assert result["status_code"] == 404
    assert result["should_retry"] is False


def test_print_vulnerability_no_data(capsys):
    """Test printing with no vulnerabilities."""
    response = {"success": True, "data": {"data": []}}
    print_vulnerability(response)
    captured = capsys.readouterr()

    assert "No new vulnerabilities received." in captured.out


def test_print_vulnerability_failed_request(capsys):
    """Test printing failed vulnerability request."""
    response = {"success": False, "error": "Rate limit exceeded", "should_retry": True}
    print_vulnerability(response)
    captured = capsys.readouterr()

    assert "Error fetching vulnerability : Rate limit exceeded" in captured.out
    assert "This request might succeed if retried later." in captured.out


def test_print_vulnerability_missing_attributes(capsys):
    """Test printing with missing vulnerability attributes."""
    response = {
        "success": True,
        "data": {
            "data": [
                {
                    "id": "vulnerability--cve-test",
                    "type": "collection",
                    "attributes": {},
                }
            ]
        },
    }
    print_vulnerability(response, max_display=1)
    captured = capsys.readouterr()

    assert "Received 1 new vulnerabilities" in captured.out
    assert "Displaying top 1 vulnerabilities:" in captured.out
    assert "--- CVE ID: N/A ---" in captured.out
    assert "Risk Rating: N/A" in captured.out
    assert "Summary: No summary provided." in captured.out


def test_print_vulnerability_formatting_error(capsys):
    """Test printing with invalid data structure."""
    response = {"success": True, "data": None}
    print_vulnerability(response)
    captured = capsys.readouterr()

    assert "Error printing vulnerabilities:" in captured.out


def test_main_success(mock_requests_get, capsys):
    """Test main function with successful response."""
    mock_response = MagicMock(status_code=200)
    mock_response.json.return_value = VULNERABILITY_API_RESPONSE
    mock_requests_get.return_value = mock_response

    from examples.vulnerability_intelligence.vulnerability import main

    main()

    captured = capsys.readouterr()
    assert (
        "Fetching latest vulnerability from Google Threat Intelligence..."
        in captured.out
    )
    assert "Received 2 new vulnerabilities" in captured.out
    assert "Displaying top 2 vulnerabilities:" in captured.out
    assert "--- CVE ID: CVE-2018-20901 ---" in captured.out
    assert mock_requests_get.call_count == 1


def test_main_with_retry(mock_requests_get, capsys):
    """Test main function with retry on failed request."""
    mock_response_fail = MagicMock(status_code=429)
    mock_response_success = MagicMock(status_code=200)
    mock_response_success.json.return_value = VULNERABILITY_API_RESPONSE
    mock_requests_get.side_effect = [mock_response_fail, mock_response_success]

    from examples.vulnerability_intelligence.vulnerability import main

    main()

    captured = capsys.readouterr()
    assert (
        "Fetching latest vulnerability from Google Threat Intelligence..."
        in captured.out
    )
    assert "Retrying failed request..." in captured.out
    assert "Received 2 new vulnerabilities" in captured.out
    assert "Displaying top 2 vulnerabilities:" in captured.out
    assert mock_requests_get.call_count == 2


def test_main_no_vulnerabilities(mock_requests_get, capsys):
    """Test main function with no vulnerabilities."""
    mock_response = MagicMock(status_code=200)
    mock_response.json.return_value = {"data": []}
    mock_requests_get.return_value = mock_response

    from examples.vulnerability_intelligence.vulnerability import main

    main()

    captured = capsys.readouterr()
    assert (
        "Fetching latest vulnerability from Google Threat Intelligence..."
        in captured.out
    )
    assert "No new vulnerabilities received." in captured.out
    assert mock_requests_get.call_count == 1


def test_main_missing_attributes(mock_requests_get, capsys):
    """Test main function with missing attributes."""
    mock_response = MagicMock(status_code=200)
    mock_response.json.return_value = {
        "data": [
            {"id": "vulnerability--cve-test", "type": "collection", "attributes": {}}
        ]
    }
    mock_requests_get.return_value = mock_response

    from examples.vulnerability_intelligence.vulnerability import main

    main()

    captured = capsys.readouterr()
    assert (
        "Fetching latest vulnerability from Google Threat Intelligence..."
        in captured.out
    )
    assert "Received 1 new vulnerabilities" in captured.out
    assert "--- CVE ID: N/A ---" in captured.out
    assert "Risk Rating: N/A" in captured.out
    assert "Summary: No summary provided." in captured.out
    assert mock_requests_get.call_count == 1
